package com.ubl.studentweb.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import com.ubl.studentweb.repository.StudentEntity;
import com.ubl.studentweb.repository.StudentEntityRepository;

import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j(topic = "student=logger")
public class CustomUserDetailsServiceImpl implements UserDetailsService {

    private StudentEntityRepository studentEntityRepository;

      public CustomUserDetailsServiceImpl(StudentEntityRepository studentEntityRepository
                          ) {
        this.studentEntityRepository = studentEntityRepository;
        
    }


     //method standard untuk login
    @Override
    public UserDetails loadUserByUsername(String nim) throws UsernameNotFoundException {
        Optional<StudentEntity> optionalEntity = studentEntityRepository.findByNim(nim);
        log.info("exist? {}", optionalEntity.isPresent());

        if (optionalEntity.isPresent()) {
            StudentEntity entity = optionalEntity.get();
            log.info("entity {}", entity);
            List<GrantedAuthority> authorities = buildAuthority(entity);
            return new org.springframework.security.core.userdetails.User(entity.getNim(),
                    entity.getPassword(),
                    authorities);
        } else {
            throw new UsernameNotFoundException("Invalid nim or password.");
        }
    }

    private List<GrantedAuthority> buildAuthority(StudentEntity studentEntity) {
        List<GrantedAuthority> grantedAuthorities = new ArrayList<>();
        grantedAuthorities.add(new SimpleGrantedAuthority(studentEntity.getRole()));
        return grantedAuthorities;
    }
    
}
